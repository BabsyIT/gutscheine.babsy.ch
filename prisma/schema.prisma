// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  authMethod    AuthMethod   @default(OAUTH)

  // Babsy App API integration
  babsyUserId   String?      @unique
  babsyUserType BabsyUserType?

  accounts      Account[]
  sessions      Session[]
  otpTokens     OtpToken[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  partner       Partner?
  redemptions   VoucherRedemption[]
}

enum UserRole {
  USER         // Regular users (sitters, parents)
  PARTNER      // Business partners
  ADMIN        // Babsy employees
}

enum AuthMethod {
  OAUTH        // Google, GitHub (legacy)
  ENTRA_ID     // Microsoft Entra ID (Azure AD) for employees
  BABSY_APP    // Babsy App API for sitters/parents
  OTP          // Email OTP for partners
}

enum BabsyUserType {
  SITTER
  PARENT
  PARTNER
  MEMBER
}

// OAuth Account model (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model (NextAuth)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Verification Token model (NextAuth)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Partner/Business model
model Partner {
  id          String    @id @default(cuid())
  userId      String    @unique
  businessName String
  description String?
  logo        String?
  address     String?
  phone       String?
  website     String?
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vouchers    Voucher[]
}

// Category model for voucher organization
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vouchers    Voucher[]
}

// Voucher model
model Voucher {
  id              String    @id @default(cuid())
  partnerId       String
  categoryId      String
  title           String
  description String
  terms           String?
  imageUrl        String?

  // Voucher configuration
  value           Float?
  discount        Int?      // Percentage discount
  maxRedemptions  Int?      // null = unlimited
  redemptionsUsed Int       @default(0)

  // QR Code
  qrCode          String    @unique

  // Validity
  validFrom       DateTime  @default(now())
  validUntil      DateTime?

  // Status
  isActive        Boolean   @default(true)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  partner         Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  category        Category  @relation(fields: [categoryId], references: [id])
  redemptions     VoucherRedemption[]

  @@index([partnerId])
  @@index([categoryId])
  @@index([validFrom, validUntil])
}

// Voucher Redemption tracking
model VoucherRedemption {
  id          String    @id @default(cuid())
  voucherId   String
  userId      String
  redeemedAt  DateTime  @default(now())
  location    String?
  notes       String?

  voucher     Voucher   @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([voucherId])
  @@index([userId])
}

// OTP Token model for email-based authentication
model OtpToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([expiresAt])
}
